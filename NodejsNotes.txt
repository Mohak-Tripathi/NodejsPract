Ep1- 

What is Nodejs- 

1. Nodejs is a "JavaScript runtime (enviornment)" built on "Chrome's V8" Javascript engine.
2. Nodejs is A "JavaScript running on the server".  (Earlier you could use JS only in browser)

Explaination => runtime environemnt is literally just the enviornment your application is running in.

V8 JS Engine =>
1. Built for google Chrome 
2. Just-in-Time compiler
3. No interpreter

What Engines do?
JS Code ===> Browser JS Engine ===> Machine Code (10001010101)


History of Nodejs- 
In 2009 an idea came in mind of "Ryan Dahl" (Google Engineer) that why not run "JS outside browser", so he took "V8 engine" and 
embedded in a "C++ program" and called it "Node.exe" later on become "Node.js"

So C++  AND V8 Engine => Node.exe => Node.js

Remember that = Nodejs is not any framework or library or language. It is just JS run time Environent. 

Fun Fact=> In 1995 Netscape written a program called "Netscape Enterprise Server" which allowed Developer to run JS at server side. 


When to use NodeJs ?

1. I/O bound 
timeframe- 13:40 
It can happen multiple requests at the same time so it is non blocking. So it handle asynchronous requests pretty well. 
10 sec request OK but if 3 sec request came. So Nodejs will fetch 3 sec request and render it and after 7 sec it will render 10 sec vaali original request. 



2. Data Streaming Applications 
Like Netflix
And infinite scrolling vaali applications like instagram, facebook etc

3. Real time chat application Ex- whatsapp 


When Not to use NodeJs ?

1. CPU intensive applications 



Ep -4
REPL 

NodeJs REPL -
The REPL feature of Nodejs is very useful in experimenting with Nodejs codes and to debug Javascript codes. 

REPL stands for=> 
Read - Reads user's input, parses the input into Javascript data-structure, and stores in memory. 
Eval - Takes and evaluates the data structure. 
Print- Prints the result. 
Loop- Loops the above command until the user presses ctrl+c twice. 


Extra Note- How to create folder in any drive (C:, E:) etc=> 
1. mkdir 
Ex- mkdir NODEJSPRACT 

Note- How to create file  in any folder 
1. type null > index.js 


Now how to enter in REPL ENVIRONMENT - 
simply write "node" and press enter in terminal 
for exit => type .exit 


Now question come what you can do with REPL or inside REPL environemnt  => 
1. JS Expression (Js Expression is nothing combination of operand and operator) 
Example = 5 - 3 
8 /3 etc 

2. Can use variable inside REPL Environent- 

example - var = "mohak" 
var b = "tripathi" 

so then a+b = "mohaktripathi" in answer 

3. Multiline code / loops 
Ex- var x= 0;

for (let i=0; i<5; i++){
    console.log(x)
}

basically you can write code of multiple lines as well. For example loops etc are example of multiline. 

4. use (_) AKA "underscore" to get the last result 
Just imagine that you are calculating something then you did other stuff. You forgot the last computed value. Then you can use "_" to get the last result. 

example - 10 + 14 
24 

24 + 5
29 

29 + 3 
32

Now  _
32

so then   _ + 3 = 35 
_ + 11 = 46


5. We can use editor mode    
node 

.editor // to enter editor mode 

ctrl+ D to finish (mtlb execute krne ke liye) and ctrl+C to cancel 

EX - const name = (myname) => console.log(`my name is ${myname}`)

name("mohak")

now enter ctrl + D 



Extra info : Inside REPL environemnt just press 2 times "tab button" and you will get list of all properties and methods of nodejs   



Ep: 5 (Nodejs Core Modules)   

Consider modules to be the same as "Javascript libraries". A set of function you want to include in your position.

Similarly, Nodejs has a set of built-in modules which you can use without any further installation. 

So core modules gives you power that you can play with file system,
 can create your own server and interact/ play with operating system inside Nodejs. 

 Ex- const fs = require("fs");

 //creating a new file - 
 fs.writeFileSync("readme.txt", "Welcome Mohak")

 If you haven't created file with readme.txt then it will create one and if already exists, then it will just add the text.

 NOw if you do the same again - 
  fs.writeFileSync("readme.txt", "Welcome Mohak Tripathi you are awesome") 
Then it will replace the earlier text and override the same. 

if you don't want that data should replace- 
the use 
fs.appendFileSync("readme.txt", "Welcome Mohak Tripathi you are awesome")


How to read other file data ? 
 const buf_data =  fs.readFileSync("readme.txt") 
console.log(buf_data)

output - <Buffer 57 65 6c 63 6f 6d 65 20 4d 6f 68 61 6b 20 74 72 69 70 61 74 68 69 20 61 67 61 69 6e 57 65 6c 63 6f 6d 65 20 6a 75 6d 61 6e 6a 69 20 20 20 57 65 6c 63 ... 11 
more bytes>     
(GOT DATA IN "binary FORM" )

//Nodejs includes an additional data type called "Buffer" 
// (Not available in browser's JavaScript) 
// Buffer is mainly used to store binary  data, while reading from a file or receiving packets over the network . 

So how to tackle ? 

const org_data = buf_data.toString() 
console.log(org_data) 




How to rename the file ? 

fs.renameSync("readme.txt", "learn.txt")  // old name and new name









