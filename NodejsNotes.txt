Ep1- 

What is Nodejs- 

1. Nodejs is a "JavaScript runtime (enviornment)" built on "Chrome's V8" Javascript engine.
2. Nodejs is A "JavaScript running on the server".  (Earlier you could use JS only in browser)

Explaination => runtime environemnt is literally just the enviornment your application is running in.

V8 JS Engine =>
1. Built for google Chrome 
2. Just-in-Time compiler
3. No interpreter

What Engines do?
JS Code ===> Browser JS Engine ===> Machine Code (10001010101)


History of Nodejs- 
In 2009 an idea came in mind of "Ryan Dahl" (Google Engineer) that why not run "JS outside browser", so he took "V8 engine" and 
embedded in a "C++ program" and called it "Node.exe" later on become "Node.js"

So C++  AND V8 Engine => Node.exe => Node.js

Remember that = Nodejs is not any framework or library or language. It is just JS run time Environent. 

Fun Fact=> In 1995 Netscape written a program called "Netscape Enterprise Server" which allowed Developer to run JS at server side. 


When to use NodeJs ?

1. I/O bound 
timeframe- 13:40 
It can happen multiple requests at the same time so it is non blocking. So it handle asynchronous requests pretty well. 
10 sec request OK but if 3 sec request came. So Nodejs will fetch 3 sec request and render it and after 7 sec it will render 10 sec vaali original request. 



2. Data Streaming Applications 
Like Netflix
And infinite scrolling vaali applications like instagram, facebook etc

3. Real time chat application Ex- whatsapp 


When Not to use NodeJs ?

1. CPU intensive applications 



Ep -4
REPL 

NodeJs REPL -
The REPL feature of Nodejs is very useful in experimenting with Nodejs codes and to debug Javascript codes. 

REPL stands for=> 
Read - Reads user's input, parses the input into Javascript data-structure, and stores in memory. 
Eval - Takes and evaluates the data structure. 
Print- Prints the result. 
Loop- Loops the above command until the user presses ctrl+c twice. 


Extra Note- How to create folder in any drive (C:, E:) etc=> 
1. mkdir 
Ex- mkdir NODEJSPRACT 

Note- How to create file  in any folder 
1. type null > index.js 


Now how to enter in REPL ENVIRONMENT - 
simply write "node" and press enter in terminal 
for exit => type .exit 


Now question come what you can do with REPL or inside REPL environemnt  => 
1. JS Expression (Js Expression is nothing combination of operand and operator) 
Example = 5 - 3 
8 /3 etc 

2. Can use variable inside REPL Environent- 

example - var = "mohak" 
var b = "tripathi" 

so then a+b = "mohaktripathi" in answer 

3. Multiline code / loops 
Ex- var x= 0;

for (let i=0; i<5; i++){
    console.log(x)
}

basically you can write code of multiple lines as well. For example loops etc are example of multiline. 

4. use (_) AKA "underscore" to get the last result 
Just imagine that you are calculating something then you did other stuff. You forgot the last computed value. Then you can use "_" to get the last result. 

example - 10 + 14 
24 

24 + 5
29 

29 + 3 
32

Now  _
32

so then   _ + 3 = 35 
_ + 11 = 46


5. We can use editor mode    
node 

.editor // to enter editor mode 

ctrl+ D to finish (mtlb execute krne ke liye) and ctrl+C to cancel 

EX - const name = (myname) => console.log(`my name is ${myname}`)

name("mohak")

now enter ctrl + D 



Extra info : Inside REPL environemnt just press 2 times "tab button" and you will get list of all properties and methods of nodejs   



Ep: 5 (Nodejs Core Modules)   

Consider modules to be the same as "Javascript libraries". A set of function you want to include in your position.

Similarly, Nodejs has a set of built-in modules which you can use without any further installation. 

So core modules gives you power that you can play with file system,
 can create your own server and interact/ play with operating system inside Nodejs. 

 Ex- const fs = require("fs");

 //creating a new file - 
 fs.writeFileSync("readme.txt", "Welcome Mohak")

 If you haven't created file with readme.txt then it will create one and if already exists, then it will just add the text.

 NOw if you do the same again - 
  fs.writeFileSync("readme.txt", "Welcome Mohak Tripathi you are awesome") 
Then it will replace the earlier text and override the same. 

if you don't want that data should replace- 
the use 
fs.appendFileSync("readme.txt", "Welcome Mohak Tripathi you are awesome")


How to read other file data ? 
 const buf_data =  fs.readFileSync("readme.txt") 
console.log(buf_data)

output - <Buffer 57 65 6c 63 6f 6d 65 20 4d 6f 68 61 6b 20 74 72 69 70 61 74 68 69 20 61 67 61 69 6e 57 65 6c 63 6f 6d 65 20 6a 75 6d 61 6e 6a 69 20 20 20 57 65 6c 63 ... 11 
more bytes>     
(GOT DATA IN "binary FORM" )

//Nodejs includes an additional data type called "Buffer" 
// (Not available in browser's JavaScript) 
// Buffer is mainly used to store binary  data, while reading from a file or receiving packets over the network . 

So how to tackle ? 

const org_data = buf_data.toString() 
console.log(org_data) 




How to rename the file ? 

fs.renameSync("readme.txt", "learn.txt")  // old name and new name



Ep - 6 -
Challenge time=> 

1. Create a folder named it "Thapa" 
2. Create a file in it named "bio.txt" and data into it. 
3. Add more data into file in the existing file . 
4. Read data without getting the buffer data at first .
//file decoding 
5. Rename the file name to "mybio.txt"
6. now delete both file and folder . 

Ans - 
From index.js -
1. fs.mkdirSync("thapa")
2. fs.writeFileSync("thapa/bio.txt", "my name is mohaktripathi")
3. fs.appendFileSync("thapa/bio.txt", "hello my name is Rakesh")

4. const data= fs.readFileSync("thapa/bio.txt", "utf-8") //encoding in 2nd parameter 
console.log(data)

5. fs.renameSync("thapa/bio.txt", "thapa/mybio.txt")

6. Two ways to delete - 
6 (i) Delete the file -

fs.unlinkSync("thapa/mybio.txt")

6(ii) And now delete folder too- 

fs.rmdirSync("thapa")



Ep-7 Nodejs file System Asynchronously 

How to create folder asynchronously - 
const fs= require("fs") 

fs.mkdir("pp", function(err){
    console.log("dir created")
})


How to create file asynchronously - 
fs.writeFile("pp/readme.txt", "today is awesome day", function(err){
console.log("file is created") 
console.log(err) // null ayega yha . Hai hi ni. 
})


Note- You have to provide callback function in asynchronous way otherwise it will 
throw error. 

So, 
we pass them a function as an argument - a callback - that gets 
called when that task completes. The callback has an argument that tells 
you whether the operation completed successfully. 
So, we need to say what to do when fs.writeFile has completed (even if it's nothing) , and checking the error. 


How to append data asynchronous- 
fs.appendFile("pp/readme.txt", "plz help me" , function(err){
  console.log("done");

})


How  to read data asynchronous- 

fs.readFile("readme.txt", "UTF-8", function(err, data){
console.log(data)
})



Ep-8 - Synchronous vs Asynchronous   

const fs = require("fs") 

const data= fs.readFileSync("readme.txt", "UTF-8") 
console.log(data)   

console.log("After reading data" )  

In this case- Output - 
First from file whatever is in "readme.txt" even if it take 10 sec    
After that - "After reading data"    // will print.   



Now Asynchronously - 
fs.readFile("readme.txt", "utf8", function(err, data){
  err ? console.log(err) : console.log(data)
})

console.log("After reading data" )  

Here Output- 
You will get "After reading data" first 
and then whatever in the "readme.txt" file . 


Note= Always do operation asynchronously. 


Ep - 9- Node.JS Challenge #2: Asynchronous CRUD Operations using File System Modules

1. Create a folder named it "Thapa" 
2. Create a file in it named "bio.txt" and data into it. 
3. Add more data into file in the existing file . 
4. Read data without getting the buffer data at first .
//file decoding 
5. Rename the file name to "mybio.txt"
6. now delete both file and folder . 

Same task but this time with asynchronous way- 
const fs = require("fs")

1. fs.mkdir("thapa", (err)=>{
  console.log("folder created")
})

2. fs.writeFile("./thapa/bio.txt", "my name is MT", (err)=>{
  console.log("file created")
})

3. fs.appendFile("./thapa/bio.txt", " my friend name is ST", function(err){
  console.log("file data added")
})

4. fs.readFile("./thapa/bio.txt", "utf-8", function(err, data){
  console.log(data)
})

5. fs.rename("./thapa/bio.txt", "./thapa/mybio.txt", function(err){
  console.log("done")
})

6. first delete file - 
fs.unlink("./thapa/mybio.txt", (err)=>{
  console.log("done")
})

Now folder - 

fs.rmdir("./thapa", (err)=> {
  console.log("done")
})


Ep-10  Node.JS OS Module To Get Operating System Info

const os = require("os");

console.log(os.arch()) // Get to know the architecture of your os-  x64 or x32  

How much free Memory I have - 

const freeMemory = os.freemem(); 
console.log(freeMemory) // Get to know the free memory in "byte" 
//SO we have to change the same in GB - 

console.log(`{freeMemory/ 1024 / 1024 / 1024}`) // Get to know the free memory in "GB" 


How much total Memory I have - 

const totalMemory = os.totalmem() 

console.log(`${totalMemory/1024/1024/1024}`) // Get to know the total memory in "GB" 

console.log(os.hostname()) // to know hostname 
console.log(os.platform()) // to know platform
console.log(os.type()) // just wait after . 

Ep - 11 Path Module In Nodejs  
Path module for working with File and directory path .
So path modules provides utilities for working with file and directory path. 


const path = require("path")

console.log(path.dirname("G:/NodejsPract/PathModule/path.js"))  // to know the directory 
Ans=> G:/NodejsPract/PathModule


console.log(path.extname("G:/NodejsPract/PathModule/path.js"))   // to get extension name 
Ans => .js 

console.log(path.basename("G:/NodejsPract/PathModule/path.js"))   // to know file name
Ans => path.js


console.log(path.parse("G:/NodejsPract/PathModule/path.js"))   // to know everything in one go- 
Ans-> 
{
  root: 'G:/',
  dir: 'G:/NodejsPract/PathModule',
  base: 'path.js',
  ext: '.js',
  name: 'path'
}

Now agar ek hi property chahiye so-   


const myPath= path.parse("G:/NodejsPract/PathModule/path.js")

console.log(myPath.root)   
console.log(myPath.base)  



Ep12- 
Node.JS #12: How to CREATE and EXPORT Our Own Modules in Node JS 

We have seen till now all inbuilt module, now we will see how to create module of our own- 

Note- In Nodejs every individual file is called module and every function & variable inside one particular module has private scope. So, 
use "module.exports" and "require" to connect different modules. 

file name- 
operator.js 

const add = (a,b) => {
  return a + b; 
}

const sub = (a,b) =>{
  return a-b; 
}

const name= "mohak" 

module.exports = add; // exporting 

// if need to export add & sub both - 

module.exports.add = add;
module.exports.sub = sub;

more good way- 
module.exports = {add, sub} // final version. 

index.js 

const add = require("./operator)  // importing 

const {add, sub} = require("./operator") // if two or more value are getting import from source file. 
console.log(add(5,8))
console.log(sub(13,5))
console.log(name)


Ep -13 Node Package Manager (NPM) 
What is NPM - 
https://www.geeksforgeeks.org/node-js-npm-node-package-manager/
https://nodejs.org/en/knowledge/getting-started/npm/what-is-npm/

Do - npm i // to accept npm 

What is package.json - 
Basically it like a repository which tells you how many packages/ library you have installed in your application 

ex- npm i chalk , so chalk here is "module"

What is package-lock.json - 
Basically it describe the package in more details. So ex- "chalk", module ka version, integrity etc. Not really in use in real world. 

Example- 
const chalk = require("chalk") 
const validator= require("validator")

console.log(chalk.red.underline.inverse("success"))   // just one example. see package. easy to use.


const res= validator.isEmail("mohak@gamil.com");

console.log(res ? chalk.green.inverse(res) : chalk.red.inverse(res))

What is node module- 
whatever dependencies we use it's code store in nodemodule. So we use directly the package but us package ka code to hoga na kahi. That place is node module. 


ep-14- Import Global NPM Module in Node JS

Note- packages are called modules in nodejs (debatable)

What are global NPM module ? 
So local npm modules can be used in that particular folder but global npm modules can be used in other folder or any other directory. Basically can be used any where in your machine after installing once. 

npm install nodemon -g  // now it won't install locally. it won't show in package.json becz it is installed in "operating system" and no need to install again and again. 



Node JS #15: Module Wrapper Function in Node.JS

"module.exports" and "require" etc ye sab aate kha se hai ???

ans - module wrapper function. 

So in Nodejs every file is called "module" and every variable and function created inside has a private scope. 
why they are private scoped? 

so for example- 

const name= "mohak" 
console.log(name) 

so when you execute the piece of code, at compilation time-  Nodejs wrape the code inside a wrapper function 

so at run time- 

(function(exports, require, module, __filename, __dirname){ 
  const name= "mohak" 
  console.log(name)
})()    // it look like this behined the scene

And as you can see, wrapper function is in form of IIFE (Immediately invoked function expression) - so anything inside the function has "local scope".  
So, exports, require, module, __filename, __dirname => these are not global but local scoped. Every individual module (/ file) has these "exports, require, module, __filename, __dirname" things locally scoped. 


so final version - 

(function(exports, require, module, __filename, __dirname){ 

const fs= require("fs");

const age = require("./age")
  const name= "mohak" 

console.log(age)

  console.log(name)

  module.exports= name;
})() 


Similarly- other parameter - 

console.log(__dirname)
console.log(__filename) 

kahi bhi likho in file, you will get to know the directory and filename. 

Note= You don't need to create IIFE function, automatically create hota hai. If you will do, it will throw error. 

Side Note- What is IIFE (Immediately invoked function expression)- 
An IIFE is a JS function that runs as soon as it is defined. 
It is a design pattern which is also known as a "Self-Executing Anonymous Function" and contains two majour parts. 

1. The first is the Anonymous function with lexical scope enclosed within the "Grouping Operator ()". This prevents accessing variables within the IIFE idiom as well as polluting the global scope. 
2. The second part creates the Immediately invoked function expression() through which the JS engine will directly intrepret the function. 


So use IIFE when you want your data to be private and second is you don't want your function to be dependent on anybody to run. Once page refresh, it should be called. 


Ex- (function(){
var a= "MT"
  console.log("Author name is Vinod")
})()

console.log(a) // a is not defined error. 

Remember - It should be Anonymous function. 

Also you can pass arguments->

(function(aName){
  console.log(`Author name is ${aName}`)
}

)("thapa")  // thapa 







16: Creating Our Own Web Server in Node.JS | HTTP Module in Node JS-



To access "web pages" of any web applocation, you need a "web server". 
The web server will also handle all the http requests for the web application. 

Eg- "IIS" is a web server for ASP.NET web applications and "Apache" is a web server for PHP or Java web applications. 

Nodejs provides capabilities to create your own web server which will handle HTTP requests asynchronously. You can use 
IIS and Apache to run Nodejs web application but it is recommended to use Nodejs web server. 
So you don't need external 3rd party to start server of Nodejs. 


To create Server, we must use - 
1. The http.createServer() method includes request and response parameters 
which is supplied by Nodejs. 

2. The request object can be used to get information about the current HTTP request. 
e.g- url, request header, and data. 

3. The response object can be used to send a response for a current HTTP request. 

4. If the response from the HTPP server is supposed to be displayed as HTML, 
you should include an HTTP header with the correct content type. 



eg - const http = require("http"); 

const server = http.createServer((req, res) =>{
  res.end("Hello from other side") // so jab server bna, hm ye hi response bhejenge. Kuch to bhjena hi hai. 

})


server.listen(8000, "127.0.0.1", ()=>{
  console.log("Listening to port number 8000")
})

So our server ready. Just run file- node index.js 
and open browser with localhost/8000 - you will see the response. 



#17: Node JS Routing | Handled HTTP Requests in Node.JS 

play with if and else for "routing"




const http = require("http"); 

const server = http.createServer((req, res) =>{

//  console.log(req.url)

if(req.url === "/"){
  res.end("Hello from other sides")
}
else if(req.url === "/about"){
  res.end("Hello from about side")
}
else if(req.url === "/contact"){
  res.end("Hello from contact side")  
  // you can write this in 2 lines too. 

like this- 
  res.write("Hello from contact side")
  res.end()

}
else{
  res.writeHead(404, {"Content-Type": "text/html"})
  res.end(" <h1> 404 Not Found". Page not found. <h1>" )
}

})

Note- // watch network tab in console as well.  

server.listen(8000, "127.0.0.1", ()=>{
  console.log("Listening to port number 8000")
})





#18: Complete JSON in Node JS 

JSON stands for JavaScript Object Notation. JSON is a lightweight format for storing and transporting data. 
JSON is often used when data is sent from a server to a web page. 


Let obj = {
  name : "MOHAK",
  age: 23
}

How to change obj in JSON data- 
let obj1 = JSON.stringify(obj)

And you can't do "obj.age" in JSON format. 

hOW TO CHANGE JSON data in Obj 
let obj2 = JSON.parse(obj1)


So MiniTask- 
1. Convert Obj to JSON format
2. Add to the new file. 
3. Read that File
4. Again convert back to js object original 
5. Console.log  

const fs= require("fs")

Let obj = {
  name : "MOHAK",
  age: 23
}

1. const jsonDataDaalooo= JSON.stringify(obj)

2. fs.writeFile("json1.json", jsonDataDaalooo, (err)=>{
  console.log("done")
})

3. fs.readFile("json1.json", "utf-8", (err, data)=>{
  console.log(data)
})

Phela hi step -3
4/5. fs.readFile("json1.json", "utf-8", (err, data)=>{
  console.log(data)

  const orgData= JSON.parse(data)
  console.log(orgData)

})



Ep- 19 -  #19: Create Simple API (Application Programming Interface) In Node JS 

What is API? 
It is a software intermediate that allows two  applications to talk 
to each other. Each time you use an app like Facebook, send a instant Message, 
or check the weather on your Phone. You are using API.




const http = require("http"); 

const server = http.createServer((req, res) =>{


if(req.url === "/"){
  res.end("Hello from other sides")
}
else if(req.url === "/about"){
  res.end("Hello from about side")
}
else if(req.url === "/contact"){
  res.end("Hello from contact side")  
  // you can write this in 2 lines too. 

like this- 
  res.write("Hello from contact side")
  res.end()

}
else if(req.url == "/userapi"){
  fs.readFile(`${__dirname}/UserApi/userapi.json`, "utf-8", function(err, data){
    console.log(data) // to see in terminal 
    res.end(data) // to see in browser UI   

    Now if you need to access any particular object, then you have to change it in in object format from JSON.   

    const objData = JSON.parse(data) 
    res.end(objData[0].name)

  })
}
else{
  res.writeHead(404, {"Content-Type": "text/html"})
  res.end(" <h1> 404 Not Found". Page not found. <h1>" )
}

})


But here there is a problem. Everytime i am refresing my browser, 
API call is making which not so good. So use "synchronous way". 





Revised one- 





const http = require("http"); 
const fs = require("fs"); 

const server = http.createServer((req, res) =>{

 const data=  fs.readFileSync(`${__dirname}/UserApi/userapi.json`, "utf-8")
const objData = JSON.parse(data)


if(req.url === "/"){
  res.end("Hello from other sides")
}
else if(req.url === "/about"){
  res.end("Hello from about side")
}
else if(req.url === "/contact"){
  res.end("Hello from contact side")  
  
}
else if(req.url == "/userapi"){
  res.writeHead(200, {"content-Type": "application/json"})
    res.end(objData[0].name)

}
else{
  res.writeHead(404, {"content-Type": "text/html"})
  res.end(" <h1> 404 Not Found. Page not found. <h1>" )
}

})




server.listen(8000, "127.0.0.1", ()=>{
  console.log("Listening to port number 8000")
})

















